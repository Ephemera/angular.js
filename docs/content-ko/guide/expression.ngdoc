@ngdoc overview
@name Developer Guide: Expressions
@description

표현식은 일반적으로 `{{ expression }}`과 같은 형태로 바인딩되는 자바스크립트와 유사한 코드 조각이며,
{@link api/ng.$parse $parse} 서비스에 의해 처리된다.

예를 들면, 아래 코드들은 모두 Angular에서 유효한 표현식이다:

  * `1+2`
  * `3*10 | currency`
  * `user.name`


## Angular 표현식 vs. 자바스크립트 표현식

Angular의 표현식을 자바스크립트의 표현식처럼 생각하기 쉽지만, Angular는 표현식을 평가하기 위해
자바스크립트의 `eval()`을 사용하지 않기 때문에 완전히 같지는 않다. Angular의 표현식은
자바스크립트의 표현식과 다음과 같은 차이점이 있다. 

  * **속성의 평가:** 자바스크립트에서는 표현식이 전역 객체인 `window`에 대해서 평가되는 반면 
    Angular에서는 모든 프로퍼티의 평가가 그 범위에 대해서 이루어진다.

  * **관대함:** 표현식의 평가 결과가 undefined나 null일 경우 자바스크립트에서는 'NullPointerExceptions'가
    발생하지만 Angular에서는 발생하지 않는다.

  * **흐름 제어문이 없음:** Angular의 표현식에는 조건문, 반복문, 또는 예외처리를 사용할 수 없다.

  * **필터:** 표현식의 평가 결과를 필터 체인을 통해 전달할 수 있다. 예를 들면 date 객체를
    특정 지역의 사람들이 읽을 수 있는 형식으로 변환할 수 있다.

반면에 임의로 자바스크립트 코드를 실행하고 싶다면, 컨트롤러 메소드를 만들어서 호출해야 한다.
또한 자바스크립트에서 Angular의 표현식을 평가(`eval()`)하고 싶다면, {@link api/ng.$rootScope.Scope#$eval `$eval()`} 메소드를 사용하라.

## 예제
<doc:example>
<doc:source>
 1+2={{1+2}}
</doc:source>
<doc:scenario>
 it('should calculate expression in binding', function() {
   expect(binding('1+2')).toEqual('3');
 });
</doc:scenario>
</doc:example>

여기에서 다른 표현식들을 평가해 볼 수 있다:

<doc:example>
<doc:source>
 <script>
   function Cntl2($scope) {
     var exprs = $scope.exprs = [];
     $scope.expr = '3*10|currency';
     $scope.addExp = function(expr) {
        exprs.push(expr);
     };

     $scope.removeExp = function(index) {
       exprs.splice(index, 1);
     };
   }
 </script>
 <div ng-controller="Cntl2" class="expressions">
   Expression:
   <input type='text' ng-model="expr" size="80"/>
   <button ng-click="addExp(expr)">Evaluate</button>
   <ul>
    <li ng-repeat="expr in exprs">
      [ <a href="" ng-click="removeExp($index)">X</a> ]
      <tt>{{expr}}</tt> => <span ng-bind="$parent.$eval(expr)"></span>
     </li>
   </ul>
 </div>
</doc:source>
<doc:scenario>
 it('should allow user expression testing', function() {
    element('.expressions :button').click();
    var li = using('.expressions ul').repeater('li');
    expect(li.count()).toBe(1);
    expect(li.row(0)).toEqual(["3*10|currency", "$30.00"]);
 });
</doc:scenario>
</doc:example>


# 프로퍼티의 평가

모든 프로퍼티의 평가는 한 범위 내에서 이루어진다. 자바스크립트에서는 전역 객체가 기본적으로 
window가 되지만, Angular의 표현식에서는 전역 객체인 `window`를 참조하려면 {@link api/ng.$window
`$window`}를 사용해야만 한다. 예를 들어, `window`에 정의된 `alert()`를 호출하고 싶을 경우에는 표현식에서
`$window.alert()`를 사용한다. 이것은 의도적인 것으로 실수로 전역 상태에 접근하는 것을 방지하기 위함이다
(일반적인 소스상의 미묘한 버드들).

<doc:example>
<doc:source>
 <script>
   function Cntl1($window, $scope){
     $scope.name = 'World';

     $scope.greet = function() {
       ($window.mockWindow || $window).alert('Hello ' + $scope.name);
     }
   }
 </script>
 <div class="example2" ng-controller="Cntl1">
   Name: <input ng-model="name" type="text"/>
   <button ng-click="greet()">Greet</button>
 </div>
</doc:source>
<doc:scenario>
 it('should calculate expression in binding', function() {
   var alertText;
   this.addFutureAction('set mock', function($window, $document, done) {
     $window.mockWindow = {
       alert: function(text){ alertText = text; }
     };
     done();
   });
   element(':button:contains(Greet)').click();
   expect(this.addFuture('alert text', function(done) {
     done(null, alertText);
   })).toBe('Hello World');
 });
</doc:scenario>
</doc:example>

## 관대함

표현식의 평가 결과가 undefined나 null일 경우에 관대하게 처리된다. 자바스크립트에서는 `a.b.c`를 평가할 때
`a`가 객체가 아닌 경우에는 예외로 처리한다. 범용 언어의 경우라면 그것이 적절하지만 표현식의 평가는
다음과 같은 형태에서 자주 보게 되는 주로 데이터 바인딩을 하기 위해서 사용된다.

        {{a.b.c}}

만약 `a`가 undefined라면 예외로 처리하는 것보다는 아무것도 보여주지 않는 것이 더 적절하다(아마 
우리는 서버의 응답을 기다릴 것이고 그것은 곧 정의가 될 것이다). 만약 표현식의 평가가 관대하게 처리되지 않는다면
다음 예와 같은 혼란스러운 코드로 바인딩을 작성해야만 한다: `{{((a||{}).b||{}).c}}`

마찬가지로 undefined나 null인 상태에서 `a.b.c()` 함수를 호출하면 간단히 undefined를 반환한다.


## 흐름 제어문이 없음

Angular의 표현식에서는 흐름 제어문을 사용할 수 없다. 그 이면에 숨겨진 이유는 애플리케이션의 로직은
뷰가 아닌 컨트롤러에 있어야 한다는 Angular가 가지고 있는 철학의 핵심 때문이다. 만약 뷰의 표현식에
조건문, 반복문, 또는 예외처리가 필요하다면 대신에 자바스크립트의 메소드에 위임하라.


## 필터

사용자에게 데이터를 보여줄 때는 로우 포맷에서 사용자 친화적인 포맷으로 데이터를 변환할 필요가 있다.
예를 들어 데이터 객체는 사용자에게 보여지기 전에 그 지역에 맞는 포맷으로 바꿔져야 할 것이다.
다음과 같이 필터의 체인을 통해 표현식을 넘겨줄 수 있다.

       name | uppercase

위 표현식의 평가는 간단하게 name의 값을 {@link api/ng.filter:uppercase `uppercase`} 필터에 
전달한다.

다음과 같은 구문을 사용해서 필터를 연결한다:

       value | filter1 | filter2

콜론을 구분자로 사용해서 필터에 인자도 전달할 수 있다. 다음 예는 숫자 123을 소수점 이하 두자리로
보여주는 것이다. 

       123 | number:2

# The $

아마 $ 접두어가 무엇을 의미하는지 궁금할지도 모른다. 그것은 단순히 다른 것들과 API 이름을
구분하기 위한 접두어일 뿐이다. 만약 Angular가 $ 를 사용하지 않았다면 `a.length()`에 대한 평가는
a나 Angular가 그런 프로퍼티를 정의하지 않았기 때문에 undefined를 반환할 것이다.

표현식의 동작을 변경해야 하는 경우 Angular의 향후 버전에는 우리가 length 메소드를 추가할지도 모른다는 것을
고려해 보라. 더군다나 개발자인 당신이 직접 length 프로퍼티를 만들 수도 있고 그렇게 되면 충돌이
발생할 것이다. 이러한 문제는 Angular가 추가되는 동작으로 기존 객체를 확장시키기 때문에 발생한다.
$ 가 붙은 접두어로 네임스페이스를 확보함으로써 Angular 개발자와 Angular를 사용하는 개발자간에
충돌 없이 조화롭게 개발할 수 있는 것이다.
