@ngdoc overview
@name 기여하기
@description


* <a href="#H1_1">라이센스</a>
* <a href="#H1_2">소스코드에 기여하기</a>
* <a href="#H1_3">코드 기준 적용하기</a>
* <a href="#H1_4">체크아웃 하고 angluarJS 만들기</a>
* <a href="#H1_5">변경사항 제출하기</a>


<a name="H1_1"></a>
# 라이센스
AngularJS는 {@link http://github.com/angular/angular.js/blob/master/LICENSE MIT license} 라이센스를 근거한 오픈소스 프로젝트입니다.
기여에 참여한다면 언제든지 환영합니다. AngularJS code base 작업하실 때는 이 페이지에 제공되는 안내서를 따라주시기 바랍니다.



<a name="H1_2"></a>
# 소스코드에 기여하기
저희는 당신이 소스코드에 기여하고, AngularJS를 보다 발전될 수 있도록 만들어주길 너무나도 바랍니다. 당신이 따라주길 바라는 안내서는 다음과 같습니다.

* 당신이 프로젝트에 기여하고자 하는 주요변화요소는 저희 노력을 조절하고, 중복작업을 예방하고, 당신의 작업이 성공적으로 적용될 수 있도록 도울 수 있기 때문에
{@link https://groups.google.com/forum/?hl=en#!forum/angular mailing list}를 통하여 사전에 상의해주십시오.

* 버그 수정과 작은 변경요소는 작업하고, <a href="#H1_5">pull request</a>로서 Github에 제출할 수 있습니다.



<a name="H1_3"></a>
# 코드 기준 적용하기

소스코드를 전반적으로 일관성있게 하려면, 우리가 그렇게 임하듯이 다음과 같은 규칙을 명심하십시오.

* 모든 기능 또는 버그 수정은 한명 또는 그 이상의 사람에게 테스트 되어야 합니다  <a href="#unit-tests">specs</a>.

* 모든 공개 API 메소드는 ngdoc과 확정버젼의 jsdoc과 함께 서면화 되어야합니다 (jsdoc은 마크다운과 `@ngdoc` 태그를 통한 템플릿화를 위한 지원으로 저희
가 추가했었습니다). 어떻게 저희가 API들을 서면화 하는지 보시려면, 현존하는 ngdocs를 확인하십시오.

* 아래에 나열된 예회사항과 함께 저희는 {@link http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml Google's
JavaScript Style Guide}에 담겨있는 규칙을 따릅니다.

  * 네임스페이스(namespaces)사용하지 않기: 대신, 저희는 익명클로저(anonymous closure)에서의 전체 `angular` code base전체를 감쌉니다 그리고
    암암리보다는 명쾌하게 API를 export 합니다.
//무슨.. 말이죠? 마지막 그리고 부터??
  * Do not use namespaces: Instead, we wrap the entire `angular` code base in an anonymous closure
and export our API explicitly rather than implicitly.

  * 모든 코드는 100자에 감쌉니다.

  * 복잡한 상속구조를 대신하여, 저희는 간단한 오브젝트를 선호합니다. 우리는 정말 필요할 경우에는 원형적인 상속을 사용합니다.

  * 저희는 함수와 클로져를 사랑하고 가능하다면 언제든지 오브젝트보다 선호합니다.

  * 보다 축소화될 수 있는 간결한 코드를 작성하기 위해서는 내부적으로 저희는 외부적인 API로 연결되는 가명을 사용합니다. 어떤의미인지 이해하기 위해서 우리의
  현존하는 코드를 확인하십시오.

  * AngularJS 전반적으로 사용되는 내부 API가 아니라면 개인적인 API에 타입주석을 적는데 목매이지 않습니다. 가장 좋은 안내는 쉽게 이해하도록 하는 것입니다.


<a name="H1_4"></a>
# 체크아웃과 Angular빌드하기

AngularJS 소스코드는 {@link http://github.com Github}에 호스팅 되어있고, 우리는 또한 코드기여를 허용하는데도 사용하고 있습니다.
AngularJS 레파지토리는 **<https://github.com/angular/angular.js>**에서 찾으실 수 있습니다.

AngularJS 체크아웃과 빌드를 위해서는 몇가지 절차가 필요합니다:

## Dependency 설치

AngularJS를 빌드하기 전에, 반듯이 당신의 컴퓨터에 다음과 같은 Dependency를 설정하고 설치해야만 합니다.

* Git: {@link http://help.github.com/mac-git-installation Github Guide to Installing Git}는 Git정보에 대한 정말 좋은 소스입니다.

* {@link http://nodejs.org Node.js}: 우리는 서면화작업을 위해서, 웹서버 개발을 동작시키고, 테스트를 실행하고, 빌드 위해서 Node를 사용합니다.
Node는 소스에서도 설치가 가능하고, 이미 준비된 번들로 설치도 가능합니다.

  한번 설치를 하면, Angular레퍼지토리의 로컬 복사로 체크아웃을 하면 설치가 가능한 몇가지 npms(노드 패키지)가 필요할 것입니다. 다음을 통해서 체크아웃이
  가능합니다:

  * `cd angular.js`
  * `npm install`

* {@link http://gruntjs.com Grunt}: 빌드 시스템으로 우리는 Grunt를 사용합니다. 다음으로 글로벌한 grunt 커멘드라인 툴을 설치하세요:

  * `sudo npm install -g grunt-cli`


## Github 계정 만들고, Angular 포크하기

Github 계정을 만들기 위해서 다음 {@link https://github.com/signup/free here}을 따라하세요.
순서대로,  {@link http://help.github.com/forking fork} 와 {@link https://github.com/angular/angular.js main angular
repository}를 계속 진행하십시오.


## AngularJS 빌드하기
## Building AngularJS

AngularJS를 빌드하기 위해서, 소스코드를 체크아웃하고, 축소판과 미축소판 AngularJS 파일을 만들기 위해서 Grunt를 사용하십시오.

1. 당신의 Github를 복제하기 위해서 다음을 실행하세요:

        git clone git@github.com:<github username>/angular.js.git

2. AngularJS 디렉토리로 이동하기 위해서 다음을 실행하세요:

        cd angular.js

3. 메인 AngularJS 레포지토리를 당신의 레포지토리로의 원격 업스트립으로 추가하려면 다음을 실행하세요:

        git remote add upstream https://github.com/angular/angular.js.git

4. node.js dependency를 추가하기 위해서

        npm install

5. AngularJS 빌드하기 위해서 다음을 실행하세요:

        grunt package

주의:
NOTE: If you're using Windows you must run your command line with administrative privileges (right click, run as
Administrator).


The build output can be located under the `build` directory. It consists of the following files and
directories:

* `angular-<version>.zip` — This is the complete zip file, which  contains all of the release build
artifacts.

* `angular.js` — The non-minified `angular` script.

* `angular.min.js` —  The minified `angular` script.

* `angular-scenario.js` — The `angular` End2End test runner.

* `docs/` — A directory that contains all of the files needed to run `docs.angularjs.org`.

* `docs/index.html` — The main page for the documentation.

* `docs/docs-scenario.html` — The End2End test runner for the documentation application.


<a name="webserver"></a>
## Running a Local Development Web Server

To debug code and run end-to-end tests, it is often useful to have a local HTTP server. For this purpose, we have
made available a local web server based on Node.js.

1. To start the web server, run:

        grunt webserver

2. To access the local server, go to this website:

        http://localhost:8000/

   By default, it serves the contents of the AngularJS project directory.


<a name="unit-tests"></a>
## Running the Unit Test Suite

Our unit and integration tests are written with Jasmine and executed with Testacular.  To run all of the
tests once on Chrome run:

    grunt test:unit

To run the tests on other browsers (Chrome, ChromeCanary, Firefox, Opera and Safari are pre-configured) use:

    grunt test:unit --browsers Opera,Firefox

Note there should be _no spaces between browsers_. `Opera, Firefox` is INVALID.

During development it's however more productive to continuously run unit tests every time the source or test files
change. To execute tests in this mode run:

1. To start the Testacular server, capture Chrome browser and run unit tests, run:

        grunt autotest:jqlite

2. To capture more browsers, open this url in the desired browser (url might be different if you have multiple instance
   of Testacular running, read Testacular's console output for the correct url):

        http://localhost:9876/

3. To re-run tests just change any source or test file.


To learn more about all of the preconfigured Grunt tasks run:

    grunt --help


## Running the end-to-end Test Suite

To run the E2E test suite:

1. Start the local web server if it's not running already.

        grunt webserver

2. In a browser, go to:

        http://localhost:8000/build/docs/docs-scenario.html

   or in terminal run:

        grunt test:end2end

For convenience you can also simply run:

        grunt test:e2e

This will start the webserver for you and run the tests.



<a name="H1_5"></a>
# Submitting Your Changes

To create and submit a change:

1. <a name="CLA"></a>
   Please sign our Contributor License Agreement (CLA) before sending pull requests. For any code changes to be
   accepted, the CLA must be signed. It's a quick process, we promise!

   For individuals we have a [simple click-through form](http://code.google.com/legal/individual-cla-v1.0.html). For
   corporations we'll need you to
   [print, sign and one of scan+email, fax or mail the form](http://code.google.com/legal/corporate-cla-v1.0.html).


2. Create a new branch off the master for your changes:

        git branch my-fix-branch

3. Check out the branch:

        git checkout my-fix-branch

4. Create your patch, make sure to have plenty of tests (that pass).

5. Commit your changes and create a descriptive commit message (the commit message is used to generate release notes,
   please check out our
   [commit message conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#)
   and our commit message presubmit hook `validate-commit-msg.js`):

        git commit -a

6. Push your branch to Github:

        git push origin my-fix-branch

7. In Github, send a pull request to `angular:master`.


8. When the patch is reviewed and merged, delete your branch and pull yours — and other — changes
from the main (upstream) repository:

  1. To delete the branch in Github, run:

            git push origin :my-fix-branch

  2. To check out the master branch, run:

            git checkout master

  3. To delete a local branch, run:

            git branch -D my-fix-branch

  4. To update your master with the latest upstream version, run:

            git pull --ff upstream master

That's it! Thank you for your contribution!
